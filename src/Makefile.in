.PHONY: all build clang clangdebug clangsloppy clangstrict clean debug export opt rebuild run sloppy strict test testbuild version

clang ?= 0
strict ?= 0
debug ?= 0
opt ?= 0
sloppy ?= 0
std ?= c++17
MAKE ?= @@MAKE@@
PREFIX ?= @@PREFIX@@
system_include_dir ?= ${PREFIX}/include

# the name of the installed executable and related directories
NAME ?= $(shell basename $(CURDIR))

# the directory of this Makefile
THIS_DIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# used by the "pkg" target
pkgdir ?= pkg

# building the main executable, or the tests
CMD := $(shell test -f main.cpp -o -f main.cc -o -f main.cxx || echo testbuild)

all: build

version:
	@echo sakemake @@VERSION@@
	@${MAKE} --version | head -1
	@scons --version | head -2

build:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=${clang} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

opt:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} opt=1 clang=${clang} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

small:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} small=1 clang=${clang} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

strict:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} strict=1 clang=${clang} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

sloppy:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} sloppy=1 clang=${clang} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

testbuild:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=${clang} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

test:
	@scons --file="${THIS_DIR}/SConstruct" -Q test clang=${clang} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clang:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangstrict:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=1 strict=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangsloppy:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=1 sloppy=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangdebug:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} clang=1 debug=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

debug:
	@scons --file="${THIS_DIR}/SConstruct" -Q ${CMD} debug=1 clang=${clang} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

run:
	@scons --file="${THIS_DIR}/SConstruct" -Q run clang=${clang} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

rebuild: clean build

main: $(wildcard main.c*)
	@scons --file="${THIS_DIR}/SConstruct" -Q clang=${clang} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

# Change the img, data or resource paths in main.cpp, main.cc or main.cxx to point to the system directories before compiling and installing on the system
#
# These strings are recognized and modified:
# ./img
# ./data
# ./resources
# "img/
# "data/
# "resources/
#
patch:
	@for ext in cpp cc cxx; do test -f main.$$ext && cp -f -v main.$$ext main.$$ext.bak && sed "s:./img:${PREFIX}/share/${NAME}/img:g;s:\"img/:\"${PREFIX}/share/${NAME}/img/:g;s:./data:${PREFIX}/share/${NAME}/data:g;s:\"data/:\"${PREFIX}/share/${NAME}/data/:g;s:./resources:${PREFIX}/share/${NAME}/resources:g;s:\"resources/:\"${PREFIX}/share/${NAME}/resources/:g" < main.$$ext.bak > main.$$ext; done || true

unpatch:
	@for ext in cpp cc cxx; do test -f main.$$ext.bak && mv -v -f main.$$ext.bak main.$$ext || true; done

# install the executable, data/*, img/*, resources/* or share/* into a shared directory, also install the license, if available
install: patch main unpatch
	@install -d "${DESTDIR}${PREFIX}/bin"
	@install -m755 main "${DESTDIR}${PREFIX}/bin/${NAME}"
	@install -d "${DESTDIR}${PREFIX}/share/${NAME}"
	@test -d img && cp -r img/* "${DESTDIR}${PREFIX}/share/${NAME}/" || true
	@test -d data && cp -r data/* "${DESTDIR}${PREFIX}/share/${NAME}/" || true
	@test -d resources && cp -r resources/* "${DESTDIR}${PREFIX}/share/${NAME}/" || true
	@test -d share && cp -r share/* "${DESTDIR}${PREFIX}/share/${NAME}/" || true
	@test -f COPYING && install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && install -m644 COPYING "${DESTDIR}${PREFIX}/share/licenses/${NAME}/COPYING" || true
	@test -f LICENSE && install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && install -m644 LICENSE "${DESTDIR}${PREFIX}/share/licenses/${NAME}/LICENSE" || true
	@rmdir --ignore-fail-on-non-empty "${DESTDIR}${PREFIX}/share/${NAME}" 2>/dev/null || true
	@rmdir --ignore-fail-on-non-empty "${DESTDIR}${PREFIX}/share" 2>/dev/null || true

# like install, but override DESTDIR in order to place everything in "${pkgdir}"
pkg: DESTDIR := ${pkgdir}
pkg: install

export:
	@cp -i -v "${THIS_DIR}/Makefile" "${THIS_DIR}/SConstruct" .

clean:
	@scons --file="${THIS_DIR}/SConstruct" -Q clean
