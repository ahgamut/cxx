.PHONY: all build clang clangdebug clangsloppy clangstrict clean debug export opt rebuild run sloppy strict test testbuild version

clang ?= 0
strict ?= 0
debug ?= 0
opt ?= 0
sloppy ?= 0
win64 ?= $(shell grep -q -F '\#include <windows.h>' main.* 2>/dev/null && echo 1 || echo 0)
patch_paths ?= 0

std ?= c++17
MAKE ?= @@MAKE@@
PREFIX ?= @@PREFIX@@
system_include_dir ?= ${PREFIX}/include

# the name of the installed executable and related directories
NAME ?= $(shell basename $(CURDIR))

# the directory of this Makefile
ROOTDIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))

# used by the "pkg" target
ifeq ($$pkgdir,)
  pkgdir := $$pkgdir
else
  pkgdir ?= ${PWD}/pkg
endif

# building the main executable, or the tests
CMD := $(shell test -f main.cpp -o -f main.cc -o -f main.cxx || echo testbuild)

# The Python 2 file
SCONSFILEARG := --file="${ROOTDIR}/SConstruct"

all: build

version:
	@echo sakemake @@VERSION@@
	@${MAKE} --version | head -1
	@scons --version | head -2

build:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

opt:
	@scons ${SCONSFILEARG} -Q ${CMD} opt=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

small:
	@scons ${SCONSFILEARG} -Q ${CMD} small=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

strict:
	@scons ${SCONSFILEARG} -Q ${CMD} strict=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

sloppy:
	@scons ${SCONSFILEARG} -Q ${CMD} sloppy=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

testbuild:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

test:
	@scons ${SCONSFILEARG} -Q test clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clang:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangstrict:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 strict=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangsloppy:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 sloppy=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

clangdebug:
	@scons ${SCONSFILEARG} -Q ${CMD} clang=1 debug=1 std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

debug:
	@scons ${SCONSFILEARG} -Q ${CMD} debug=1 clang=${clang} win64=${win64} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

run:
	@scons ${SCONSFILEARG} -Q run clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir=${system_include_dir}

rebuild: clean build

main: $(wildcard main.c*)
	@scons ${SCONSFILEARG} -Q clang=${clang} win64=${win64} strict=${strict} debug=${debug} opt=${opt} sloppy=${sloppy} std=${std} CXX=${CXX} CXXFLAGS=${CXXFLAGS} system_include_dir="${system_include_dir}" imgdir="${PREFIX}/share/${NAME}/img" datadir="${PREFIX}/share/${NAME}/data" shaderdir="${PREFIX}/share/${NAME}/shaders" sharedir="${PREFIX}/share/${NAME}"

# Change the img, data or resource paths in main.cpp, main.cc or main.cxx to point to the system directories before compiling and installing on the system
#
# These strings are recognized and modified, at installation time:
# ../img
# ../data
# ../shaders
# ./img
# ./data
# ./shaders
# "img/
# "data/
# "shaders/
#
patch:
	@if [ ${patch_paths} = 1 ]; then \
	  for ext in cpp cc cxx; do \
	    test -f main.$$ext && \
		cp -f -v main.$$ext main.$$ext.bak && \
		sed "s:\.\./img:${PREFIX}/share/${NAME}/img:g;s:\./img:${PREFIX}/share/${NAME}/img:g;s:\"img/:\"${PREFIX}/share/${NAME}/img/:g;s:\.\./data:${PREFIX}/share/${NAME}/data:g;s:\./data:${PREFIX}/share/${NAME}/data:g;s:\"data/:\"${PREFIX}/share/${NAME}/data/:g;s:\.\./shaders:${PREFIX}/share/${NAME}/shaders:g;s:\./shaders:${PREFIX}/share/${NAME}/shaders:g;s:\"shaders/:\"${PREFIX}/share/${NAME}/shaders/:g" < main.$$ext.bak > main.$$ext; \
	  done || \
	  true; \
	fi

unpatch:
	@if [ ${patch_paths} = 1 ]; then \
	  for ext in cpp cc cxx; do \
	    test -f main.$$ext.bak && \
		mv -v -f main.$$ext.bak main.$$ext || \
		true; \
	  done; \
	fi

# install the executable, data/*, img/*, shaders/* or share/* into a shared directory, also install the license, if available
install: patch main unpatch
	@install -d "${DESTDIR}${PREFIX}/bin"
	@if [ ${win64} = 0 ]; then \
	  install -m755 "${NAME}" "${DESTDIR}${PREFIX}/bin/${NAME}" || \
	  install -m755 src/main "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	else \
	  install -m755 "${NAME}.exe" "${DESTDIR}${PREFIX}/bin/${NAME}.exe" || \
	  install -m755 src/main.exe "${DESTDIR}${PREFIX}/bin/${NAME}.exe"; \
	  echo '#!/bin/sh' > "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	  echo 'wine ${PREFIX}/bin/${NAME}.exe "$$@"' >> "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	  chmod 755 "${DESTDIR}${PREFIX}/bin/${NAME}"; \
	fi
	@test -d img && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/img" && \
	  cp -r img/* "${DESTDIR}${PREFIX}/share/${NAME}/img/" || \
	  true
	@test -d data && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/data" && \
	  cp -r data/* "${DESTDIR}${PREFIX}/share/${NAME}/data/" || \
	  true
	@test -d shaders && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}/shaders" && \
	  cp -r shaders/* "${DESTDIR}${PREFIX}/share/${NAME}/shaders/" || \
	  true
	@test -d share && \
	  install -d "${DESTDIR}${PREFIX}/share/${NAME}" && \
	  cp -r share/* "${DESTDIR}${PREFIX}/share/${NAME}/" || \
	  true
	@test -f COPYING && \
	  install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && \
	  install -m644 COPYING "${DESTDIR}${PREFIX}/share/licenses/${NAME}/COPYING" || true
	@test -f LICENSE && \
	  install -d "${DESTDIR}${PREFIX}/share/licenses/${NAME}" && \
	  install -m644 LICENSE "${DESTDIR}${PREFIX}/share/licenses/${NAME}/LICENSE" || true
	@find "${DESTDIR}${PREFIX}/share/${NAME}" -type d -exec chmod 755 {} \;
	@find "${DESTDIR}${PREFIX}/share/${NAME}" -type f -exec chmod 644 {} \;

export:
	@cp -i -v "${ROOTDIR}/Makefile" "${ROOTDIR}/SConstruct" .

clean:
	@scons ${SCONSFILEARG} -Q clean win64=${win64}

# like install, but override DESTDIR in order to place everything in "${pkgdir}"
pkg: DESTDIR ?= ${pkgdir}
pkg: install
